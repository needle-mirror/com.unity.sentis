using Unity.Profiling;
using UnityEngine;

namespace Unity.Sentis
{
    static class ComputeFunctions
    {
        // Compute Shaders
        static ComputeShader k_TextureToTensor = Resources.Load<ComputeShader>("Sentis/TextureConversion/TextureToTensor");
        static ComputeShader k_TensorToTexture = Resources.Load<ComputeShader>("Sentis/TextureConversion/TensorToTexture");
        static ComputeShader k_AxisActivations = Resources.Load<ComputeShader>("Sentis/ComputeShaders/AxisActivations");
        static ComputeShader k_CumSum = Resources.Load<ComputeShader>("Sentis/ComputeShaders/CumSum");
        static ComputeShader k_ReferenceImpl = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl");
        static ComputeShader k_RNN = Resources.Load<ComputeShader>("Sentis/ComputeShaders/RNN");
        static ComputeShader k_LogicalOps = Resources.Load<ComputeShader>("Sentis/ComputeShaders/LogicalOps");
        static ComputeShader k_CompareOps = Resources.Load<ComputeShader>("Sentis/ComputeShaders/CompareOps");
        static ComputeShader k_GroupConv = Resources.Load<ComputeShader>("Sentis/ComputeShaders/GroupConv");
        static ComputeShader k_Conv = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Conv");
        static ComputeShader k_DepthwiseConv = Resources.Load<ComputeShader>("Sentis/ComputeShaders/DepthwiseConv");
        static ComputeShader k_ConvTranspose = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ConvTranspose");
        static ComputeShader k_Dense = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Dense");
        static ComputeShader k_GemmT = Resources.Load<ComputeShader>("Sentis/ComputeShaders/GemmT");
        static ComputeShader k_Pool = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Pool");
        static ComputeShader k_Normalization = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Normalization");
        static ComputeShader k_NMS = Resources.Load<ComputeShader>("Sentis/ComputeShaders/NMS");
        static ComputeShader k_ReduceIndices = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReduceIndices");
        static ComputeShader k_CopyOps = Resources.Load<ComputeShader>("Sentis/ComputeShaders/CopyOps");
        static ComputeShader k_Random = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Random");
        static ComputeShader k_IndexingOps = Resources.Load<ComputeShader>("Sentis/ComputeShaders/IndexingOps");
        static ComputeShader k_SortingOps = Resources.Load<ComputeShader>("Sentis/ComputeShaders/SortingOps");
        static ComputeShader k_ScatterOps = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ScatterOps");
        static ComputeShader k_GridSample = Resources.Load<ComputeShader>("Sentis/ComputeShaders/GridSample");
        static ComputeShader k_Resize = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Resize");
        static ComputeShader k_ImageBased = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ImageBased");
        static ComputeShader k_BroadcastGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Compute.Shaders.Broadcast.gen");
        static ComputeShader k_ConvGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Compute.Shaders.Conv.gen");
        static ComputeShader k_ConvTransposeGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Compute.Shaders.ConvTranspose.gen");
        static ComputeShader k_ReductionGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Compute.Shaders.Reduction.gen");
        static ComputeShader k_ReductionUnrolledGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Compute.Shaders.ReductionUnrolled.gen");
        static ComputeShader k_PointwiseUnaryGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/Compute.Shaders.PointwiseUnary.gen");
        static ComputeShader k_GenericAGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl.GenericA.gen");
        static ComputeShader k_PadAGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl.PadA.gen");
        static ComputeShader k_PoolAGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl.PoolA.gen");
        static ComputeShader k_EinsumGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl.Einsum.gen");
        static ComputeShader k_IndexingOpsAGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl.IndexingOpsA.gen");
        static ComputeShader k_LogicalGen = Resources.Load<ComputeShader>("Sentis/ComputeShaders/ReferenceImpl.Logical.gen");
        static ComputeShader k_BitonicSort = Resources.Load<ComputeShader>("Sentis/ComputeShaders/BitonicSort");

        // Kernels
        public static ComputeFunction k_TextureToTensorExact = new ComputeFunction(k_TextureToTensor, "TextureToTensorExact");
        public static ComputeFunction k_TextureToTensorLinear = new ComputeFunction(k_TextureToTensor, "TextureToTensorLinear");
        public static ComputeFunction k_TensorToTextureExact = new ComputeFunction(k_TensorToTexture, "TensorToTextureExact");
        public static ComputeFunction k_TensorToTextureLinear = new ComputeFunction(k_TensorToTexture, "TensorToTextureLinear");
        public static ComputeFunction k_LogSoftmaxEnd = new ComputeFunction(k_AxisActivations, "LogSoftmaxEnd");
        public static ComputeFunction k_SoftmaxEnd = new ComputeFunction(k_AxisActivations, "SoftmaxEnd");
        public static ComputeFunction k_HardmaxEnd = new ComputeFunction(k_AxisActivations, "HardmaxEnd");
        public static ComputeFunction k_CumSumFloatForwardInclusive = new ComputeFunction(k_CumSum, "CumSumFloatForwardInclusive");
        public static ComputeFunction k_CumSumFloatForwardExclusive = new ComputeFunction(k_CumSum, "CumSumFloatForwardExclusive");
        public static ComputeFunction k_CumSumFloatReverseInclusive = new ComputeFunction(k_CumSum, "CumSumFloatReverseInclusive");
        public static ComputeFunction k_CumSumFloatReverseExclusive = new ComputeFunction(k_CumSum, "CumSumFloatReverseExclusive");
        public static ComputeFunction k_CumSumIntForwardInclusive = new ComputeFunction(k_CumSum, "CumSumIntForwardInclusive");
        public static ComputeFunction k_CumSumIntForwardExclusive = new ComputeFunction(k_CumSum, "CumSumIntForwardExclusive");
        public static ComputeFunction k_CumSumIntReverseInclusive = new ComputeFunction(k_CumSum, "CumSumIntReverseInclusive");
        public static ComputeFunction k_CumSumIntReverseExclusive = new ComputeFunction(k_CumSum, "CumSumIntReverseExclusive");
        public static ComputeFunction k_MatMul = new ComputeFunction(k_ReferenceImpl, "MatMul");
        public static ComputeFunction k_LSTMEnd = new ComputeFunction(k_RNN, "LSTMEnd");
        public static ComputeFunction k_OrInt = new ComputeFunction(k_LogicalOps, "OrInt");
        public static ComputeFunction k_AndInt = new ComputeFunction(k_LogicalOps, "AndInt");
        public static ComputeFunction k_XorInt = new ComputeFunction(k_LogicalOps, "XorInt");
        public static ComputeFunction k_IsInf = new ComputeFunction(k_LogicalOps, "IsInf");
        public static ComputeFunction k_GreaterFloat = new ComputeFunction(k_CompareOps, "GreaterFloat");
        public static ComputeFunction k_GreaterInt = new ComputeFunction(k_CompareOps, "GreaterInt");
        public static ComputeFunction k_GreaterOrEqualFloat = new ComputeFunction(k_CompareOps, "GreaterOrEqualFloat");
        public static ComputeFunction k_GreaterOrEqualInt = new ComputeFunction(k_CompareOps, "GreaterOrEqualInt");
        public static ComputeFunction k_LessFloat = new ComputeFunction(k_CompareOps, "LessFloat");
        public static ComputeFunction k_LessInt = new ComputeFunction(k_CompareOps, "LessInt");
        public static ComputeFunction k_LessOrEqualFloat = new ComputeFunction(k_CompareOps, "LessOrEqualFloat");
        public static ComputeFunction k_LessOrEqualInt = new ComputeFunction(k_CompareOps, "LessOrEqualInt");
        public static ComputeFunction k_EqualFloat = new ComputeFunction(k_CompareOps, "EqualFloat");
        public static ComputeFunction k_EqualInt = new ComputeFunction(k_CompareOps, "EqualInt");
        public static ComputeFunction k_GroupedConv3D = new ComputeFunction(k_GroupConv, "GroupedConv3D");
        public static ComputeFunction k_GroupedConv2D = new ComputeFunction(k_GroupConv, "GroupedConv2D");
        public static ComputeFunction k_GroupedConv1D = new ComputeFunction(k_GroupConv, "GroupedConv1D");
        public static ComputeFunction k_GroupedConv3D_GroupLower64 = new ComputeFunction(k_GroupConv, "GroupedConv3D_GroupLower64");
        public static ComputeFunction k_GroupedConv2D_GroupLower64 = new ComputeFunction(k_GroupConv, "GroupedConv2D_GroupLower64");
        public static ComputeFunction k_GroupedConv1D_GroupLower64 = new ComputeFunction(k_GroupConv, "GroupedConv1D_GroupLower64");
        public static ComputeFunction k_Conv3D_T16x16_R4x4 = new ComputeFunction(k_Conv, "Conv3D_T16x16_R4x4");
        public static ComputeFunction k_Conv3D_1x1_T16x16_R4x4 = new ComputeFunction(k_Conv, "Conv3D_1x1_T16x16_R4x4");
        public static ComputeFunction k_Conv2D_T16x16_R4x4 = new ComputeFunction(k_Conv, "Conv2D_T16x16_R4x4");
        public static ComputeFunction k_Conv2D_1x1_T16x16_R4x4 = new ComputeFunction(k_Conv, "Conv2D_1x1_T16x16_R4x4");
        public static ComputeFunction k_Conv1D_T16x16_R4x4 = new ComputeFunction(k_Conv, "Conv1D_T16x16_R4x4");
        public static ComputeFunction k_Conv1D_1x1_T16x16_R4x4 = new ComputeFunction(k_Conv, "Conv1D_1x1_T16x16_R4x4");
        public static ComputeFunction k_DepthwiseConv2DDirect = new ComputeFunction(k_DepthwiseConv, "DepthwiseConv2DDirect");
        public static ComputeFunction k_DepthwiseConv2DWinograd = new ComputeFunction(k_DepthwiseConv, "DepthwiseConv2DWinograd");
        public static ComputeFunction k_KernelWinoExpand = new ComputeFunction(k_DepthwiseConv, "KernelWinoExpand");
        public static ComputeFunction k_ConvTranspose3D_T16x16_R4x4 = new ComputeFunction(k_ConvTranspose, "ConvTranspose3D_T16x16_R4x4");
        public static ComputeFunction k_ConvTranspose2D_T16x16_R4x4 = new ComputeFunction(k_ConvTranspose, "ConvTranspose2D_T16x16_R4x4");
        public static ComputeFunction k_ConvTranspose1D_T16x16_R4x4 = new ComputeFunction(k_ConvTranspose, "ConvTranspose1D_T16x16_R4x4");
        public static ComputeFunction k_Dense_T8x8_R4x4 = new ComputeFunction(k_Dense, "Dense_T8x8_R4x4");
        public static ComputeFunction k_DenseBatched_T8x8_R4x4 = new ComputeFunction(k_Dense, "DenseBatched_T8x8_R4x4");
        public static ComputeFunction k_Gemm_T8x8_R4x4 = new ComputeFunction(k_Dense, "Gemm_T8x8_R4x4");
        public static ComputeFunction k_GemmBatched_T8x8_R4x4 = new ComputeFunction(k_Dense, "GemmBatched_T8x8_R4x4");
        public static ComputeFunction k_Dense_T16x16_R4x4 = new ComputeFunction(k_Dense, "Dense_T16x16_R4x4");
        public static ComputeFunction k_DenseBatched_T16x16_R4x4 = new ComputeFunction(k_Dense, "DenseBatched_T16x16_R4x4");
        public static ComputeFunction k_Gemm_T16x16_R4x4 = new ComputeFunction(k_Dense, "Gemm_T16x16_R4x4");
        public static ComputeFunction k_GemmBatched_T16x16_R4x4 = new ComputeFunction(k_Dense, "GemmBatched_T16x16_R4x4");
        public static ComputeFunction k_Dense_V_L1Cached64 = new ComputeFunction(k_Dense, "Dense_V_L1Cached64");
        public static ComputeFunction k_DenseBatched_V_L1Cached64 = new ComputeFunction(k_Dense, "DenseBatched_V_L1Cached64");
        public static ComputeFunction k_Gemm_V_L1Cached64 = new ComputeFunction(k_Dense, "Gemm_V_L1Cached64");
        public static ComputeFunction k_GemmBatched_V_L1Cached64 = new ComputeFunction(k_Dense, "GemmBatched_V_L1Cached64");
        public static ComputeFunction k_GemmT_XT_T8x8_R4x4 = new ComputeFunction(k_GemmT, "GemmT_XT_T8x8_R4x4");
        public static ComputeFunction k_GemmT_WT_T8x8_R4x4 = new ComputeFunction(k_GemmT, "GemmT_WT_T8x8_R4x4");
        public static ComputeFunction k_GemmT_XT_WT_T8x8_R4x4 = new ComputeFunction(k_GemmT, "GemmT_XT_WT_T8x8_R4x4");
        public static ComputeFunction k_AveragePoolReduce = new ComputeFunction(k_Pool, "AveragePoolReduce");
        public static ComputeFunction k_MaxPoolReduce = new ComputeFunction(k_Pool, "MaxPoolReduce");
        public static ComputeFunction k_GlobalAveragePool = new ComputeFunction(k_Pool, "GlobalAveragePool");
        public static ComputeFunction k_GlobalMaxPool = new ComputeFunction(k_Pool, "GlobalMaxPool");
        public static ComputeFunction k_AverageVariancePoolReduce = new ComputeFunction(k_Pool, "AverageVariancePoolReduce");
        public static ComputeFunction k_GlobalAverageVariancePool = new ComputeFunction(k_Pool, "GlobalAverageVariancePool");
        public static ComputeFunction k_ArgMaxReduce = new ComputeFunction(k_Pool, "ArgMaxReduce");
        public static ComputeFunction k_GlobalArgMaxReduce = new ComputeFunction(k_Pool, "GlobalArgMaxReduce");
        public static ComputeFunction k_LayerNormalizationTail = new ComputeFunction(k_Normalization, "LayerNormalizationTail");
        public static ComputeFunction k_RMSNormalizationTail = new ComputeFunction(k_Normalization, "RMSNormalizationTail");
        public static ComputeFunction k_BatchNormalization = new ComputeFunction(k_Normalization, "BatchNormalization");
        public static ComputeFunction k_ScaleBias = new ComputeFunction(k_Normalization, "ScaleBias");
        public static ComputeFunction k_NMSBitmaskCorners = new ComputeFunction(k_NMS, "NMSBitmaskCorners");
        public static ComputeFunction k_NMSBitmaskCenter = new ComputeFunction(k_NMS, "NMSBitmaskCenter");
        public static ComputeFunction k_NMSSelect = new ComputeFunction(k_NMS, "NMSSelect");
        public static ComputeFunction k_NMSCompact = new ComputeFunction(k_NMS, "NMSCompact");
        public static ComputeFunction k_ArgMaxFloatFirst = new ComputeFunction(k_ReduceIndices, "ArgMaxFloatFirst");
        public static ComputeFunction k_ArgMinFloatFirst = new ComputeFunction(k_ReduceIndices, "ArgMinFloatFirst");
        public static ComputeFunction k_ArgMaxFloatLast = new ComputeFunction(k_ReduceIndices, "ArgMaxFloatLast");
        public static ComputeFunction k_ArgMinFloatLast = new ComputeFunction(k_ReduceIndices, "ArgMinFloatLast");
        public static ComputeFunction k_ArgMaxIntFirst = new ComputeFunction(k_ReduceIndices, "ArgMaxIntFirst");
        public static ComputeFunction k_ArgMinIntFirst = new ComputeFunction(k_ReduceIndices, "ArgMinIntFirst");
        public static ComputeFunction k_ArgMaxIntLast = new ComputeFunction(k_ReduceIndices, "ArgMaxIntLast");
        public static ComputeFunction k_ArgMinIntLast = new ComputeFunction(k_ReduceIndices, "ArgMinIntLast");
        public static ComputeFunction k_MemCopy = new ComputeFunction(k_CopyOps, "MemCopy");
        public static ComputeFunction k_MemCopyStride = new ComputeFunction(k_CopyOps, "MemCopyStride");
        public static ComputeFunction k_MemSet = new ComputeFunction(k_CopyOps, "MemSet");
        public static ComputeFunction k_Split = new ComputeFunction(k_CopyOps, "Split");
        public static ComputeFunction k_Tril = new ComputeFunction(k_CopyOps, "Tril");
        public static ComputeFunction k_Triu = new ComputeFunction(k_CopyOps, "Triu");
        public static ComputeFunction k_CastHalfToFloat = new ComputeFunction(k_CopyOps, "CastHalfToFloat");
        public static ComputeFunction k_DequantizeUint8 = new ComputeFunction(k_CopyOps, "DequantizeUint8");
        public static ComputeFunction k_Transpose2D = new ComputeFunction(k_CopyOps, "Transpose2D");
        public static ComputeFunction k_RandomUniform = new ComputeFunction(k_Random, "RandomUniform");
        public static ComputeFunction k_RandomNormal = new ComputeFunction(k_Random, "RandomNormal");
        public static ComputeFunction k_BernoulliFloat = new ComputeFunction(k_Random, "BernoulliFloat");
        public static ComputeFunction k_BernoulliInt = new ComputeFunction(k_Random, "BernoulliInt");
        public static ComputeFunction k_TopP = new ComputeFunction(k_Random, "TopP");
        public static ComputeFunction k_OneHot = new ComputeFunction(k_IndexingOps, "OneHot");
        public static ComputeFunction k_GatherND = new ComputeFunction(k_IndexingOps, "GatherND");
        public static ComputeFunction k_SliceSet = new ComputeFunction(k_IndexingOps, "SliceSet");
        public static ComputeFunction k_TopKLargest = new ComputeFunction(k_SortingOps, "TopKLargest");
        public static ComputeFunction k_TopKSmallest = new ComputeFunction(k_SortingOps, "TopKSmallest");
        public static ComputeFunction k_ScatterNDFloat = new ComputeFunction(k_ScatterOps, "ScatterNDFloat");
        public static ComputeFunction k_ScatterNDInt = new ComputeFunction(k_ScatterOps, "ScatterNDInt");
        public static ComputeFunction k_GridSample2D = new ComputeFunction(k_GridSample, "GridSample2D");
        public static ComputeFunction k_GridSample3D = new ComputeFunction(k_GridSample, "GridSample3D");
        public static ComputeFunction k_Upsample1D_Nearest_Floor = new ComputeFunction(k_Resize, "Upsample1D_Nearest_Floor");
        public static ComputeFunction k_Upsample1D_Nearest_Ceil = new ComputeFunction(k_Resize, "Upsample1D_Nearest_Ceil");
        public static ComputeFunction k_Upsample1D_Linear_None = new ComputeFunction(k_Resize, "Upsample1D_Linear_None");
        public static ComputeFunction k_Upsample2D_Nearest_Floor = new ComputeFunction(k_Resize, "Upsample2D_Nearest_Floor");
        public static ComputeFunction k_Upsample2D_Nearest_Ceil = new ComputeFunction(k_Resize, "Upsample2D_Nearest_Ceil");
        public static ComputeFunction k_Upsample2D_Linear_None = new ComputeFunction(k_Resize, "Upsample2D_Linear_None");
        public static ComputeFunction k_Upsample3D_Nearest_Floor = new ComputeFunction(k_Resize, "Upsample3D_Nearest_Floor");
        public static ComputeFunction k_Upsample3D_Nearest_Ceil = new ComputeFunction(k_Resize, "Upsample3D_Nearest_Ceil");
        public static ComputeFunction k_Upsample3D_Linear_None = new ComputeFunction(k_Resize, "Upsample3D_Linear_None");
        public static ComputeFunction k_Resize1D_Nearest_Floor = new ComputeFunction(k_Resize, "Resize1D_Nearest_Floor");
        public static ComputeFunction k_Resize1D_Nearest_Ceil = new ComputeFunction(k_Resize, "Resize1D_Nearest_Ceil");
        public static ComputeFunction k_Resize1D_Linear_None = new ComputeFunction(k_Resize, "Resize1D_Linear_None");
        public static ComputeFunction k_DepthToSpaceDepthColumnRow = new ComputeFunction(k_ImageBased, "DepthToSpaceDepthColumnRow");
        public static ComputeFunction k_DepthToSpaceColumnRowDepth = new ComputeFunction(k_ImageBased, "DepthToSpaceColumnRowDepth");
        public static ComputeFunction k_SpaceToDepth = new ComputeFunction(k_ImageBased, "SpaceToDepth");
        public static ComputeFunction k_RoiAlignAvg = new ComputeFunction(k_ImageBased, "RoiAlignAvg");
        public static ComputeFunction k_RoiAlignMax = new ComputeFunction(k_ImageBased, "RoiAlignMax");
        public static ComputeFunction k_ScalarBroadcastPRelu = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastPRelu");
        public static ComputeFunction k_BroadcastPRelu = new ComputeFunction(k_BroadcastGen, "BroadcastPRelu");
        public static ComputeFunction k_ElementwisePRelu = new ComputeFunction(k_BroadcastGen, "ElementwisePRelu");
        public static ComputeFunction k_ScalarBroadcastPowFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastPowFloat");
        public static ComputeFunction k_BroadcastPowFloat = new ComputeFunction(k_BroadcastGen, "BroadcastPowFloat");
        public static ComputeFunction k_ElementwisePowFloat = new ComputeFunction(k_BroadcastGen, "ElementwisePowFloat");
        public static ComputeFunction k_ScalarBroadcastPowInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastPowInt");
        public static ComputeFunction k_BroadcastPowInt = new ComputeFunction(k_BroadcastGen, "BroadcastPowInt");
        public static ComputeFunction k_ElementwisePowInt = new ComputeFunction(k_BroadcastGen, "ElementwisePowInt");
        public static ComputeFunction k_ScalarBroadcastAddFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastAddFloat");
        public static ComputeFunction k_BroadcastAddFloat = new ComputeFunction(k_BroadcastGen, "BroadcastAddFloat");
        public static ComputeFunction k_ElementwiseAddFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseAddFloat");
        public static ComputeFunction k_ScalarBroadcastSubFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastSubFloat");
        public static ComputeFunction k_BroadcastSubFloat = new ComputeFunction(k_BroadcastGen, "BroadcastSubFloat");
        public static ComputeFunction k_ElementwiseSubFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseSubFloat");
        public static ComputeFunction k_ScalarBroadcastMulFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMulFloat");
        public static ComputeFunction k_BroadcastMulFloat = new ComputeFunction(k_BroadcastGen, "BroadcastMulFloat");
        public static ComputeFunction k_ElementwiseMulFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseMulFloat");
        public static ComputeFunction k_ScalarBroadcastDivFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastDivFloat");
        public static ComputeFunction k_BroadcastDivFloat = new ComputeFunction(k_BroadcastGen, "BroadcastDivFloat");
        public static ComputeFunction k_ElementwiseDivFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseDivFloat");
        public static ComputeFunction k_ScalarBroadcastMinFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMinFloat");
        public static ComputeFunction k_BroadcastMinFloat = new ComputeFunction(k_BroadcastGen, "BroadcastMinFloat");
        public static ComputeFunction k_ElementwiseMinFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseMinFloat");
        public static ComputeFunction k_ScalarBroadcastMaxFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMaxFloat");
        public static ComputeFunction k_BroadcastMaxFloat = new ComputeFunction(k_BroadcastGen, "BroadcastMaxFloat");
        public static ComputeFunction k_ElementwiseMaxFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseMaxFloat");
        public static ComputeFunction k_ScalarBroadcastMeanFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMeanFloat");
        public static ComputeFunction k_BroadcastMeanFloat = new ComputeFunction(k_BroadcastGen, "BroadcastMeanFloat");
        public static ComputeFunction k_ElementwiseMeanFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseMeanFloat");
        public static ComputeFunction k_ScalarBroadcastModFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastModFloat");
        public static ComputeFunction k_BroadcastModFloat = new ComputeFunction(k_BroadcastGen, "BroadcastModFloat");
        public static ComputeFunction k_ElementwiseModFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseModFloat");
        public static ComputeFunction k_ScalarBroadcastFModFloat = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastFModFloat");
        public static ComputeFunction k_BroadcastFModFloat = new ComputeFunction(k_BroadcastGen, "BroadcastFModFloat");
        public static ComputeFunction k_ElementwiseFModFloat = new ComputeFunction(k_BroadcastGen, "ElementwiseFModFloat");
        public static ComputeFunction k_ScalarBroadcastAddInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastAddInt");
        public static ComputeFunction k_BroadcastAddInt = new ComputeFunction(k_BroadcastGen, "BroadcastAddInt");
        public static ComputeFunction k_ElementwiseAddInt = new ComputeFunction(k_BroadcastGen, "ElementwiseAddInt");
        public static ComputeFunction k_ScalarBroadcastSubInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastSubInt");
        public static ComputeFunction k_BroadcastSubInt = new ComputeFunction(k_BroadcastGen, "BroadcastSubInt");
        public static ComputeFunction k_ElementwiseSubInt = new ComputeFunction(k_BroadcastGen, "ElementwiseSubInt");
        public static ComputeFunction k_ScalarBroadcastMulInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMulInt");
        public static ComputeFunction k_BroadcastMulInt = new ComputeFunction(k_BroadcastGen, "BroadcastMulInt");
        public static ComputeFunction k_ElementwiseMulInt = new ComputeFunction(k_BroadcastGen, "ElementwiseMulInt");
        public static ComputeFunction k_ScalarBroadcastDivInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastDivInt");
        public static ComputeFunction k_BroadcastDivInt = new ComputeFunction(k_BroadcastGen, "BroadcastDivInt");
        public static ComputeFunction k_ElementwiseDivInt = new ComputeFunction(k_BroadcastGen, "ElementwiseDivInt");
        public static ComputeFunction k_ScalarBroadcastMinInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMinInt");
        public static ComputeFunction k_BroadcastMinInt = new ComputeFunction(k_BroadcastGen, "BroadcastMinInt");
        public static ComputeFunction k_ElementwiseMinInt = new ComputeFunction(k_BroadcastGen, "ElementwiseMinInt");
        public static ComputeFunction k_ScalarBroadcastMaxInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastMaxInt");
        public static ComputeFunction k_BroadcastMaxInt = new ComputeFunction(k_BroadcastGen, "BroadcastMaxInt");
        public static ComputeFunction k_ElementwiseMaxInt = new ComputeFunction(k_BroadcastGen, "ElementwiseMaxInt");
        public static ComputeFunction k_ScalarBroadcastModInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastModInt");
        public static ComputeFunction k_BroadcastModInt = new ComputeFunction(k_BroadcastGen, "BroadcastModInt");
        public static ComputeFunction k_ElementwiseModInt = new ComputeFunction(k_BroadcastGen, "ElementwiseModInt");
        public static ComputeFunction k_ScalarBroadcastFModInt = new ComputeFunction(k_BroadcastGen, "ScalarBroadcastFModInt");
        public static ComputeFunction k_BroadcastFModInt = new ComputeFunction(k_BroadcastGen, "BroadcastFModInt");
        public static ComputeFunction k_ElementwiseFModInt = new ComputeFunction(k_BroadcastGen, "ElementwiseFModInt");
        public static ComputeFunction k_Conv2D_KxK = new ComputeFunction(k_ConvGen, "Conv2D_KxK");
        public static ComputeFunction k_Conv2D_1x1 = new ComputeFunction(k_ConvGen, "Conv2D_1x1");
        public static ComputeFunction k_Conv1D_KxK = new ComputeFunction(k_ConvGen, "Conv1D_KxK");
        public static ComputeFunction k_Conv1D_1x1 = new ComputeFunction(k_ConvGen, "Conv1D_1x1");
        public static ComputeFunction k_ConvTranspose2D_KxK = new ComputeFunction(k_ConvTransposeGen, "ConvTranspose2D_KxK");
        public static ComputeFunction k_ConvTranspose1D_KxK = new ComputeFunction(k_ConvTransposeGen, "ConvTranspose1D_KxK");
        public static ComputeFunction k_ReduceMaxFloat = new ComputeFunction(k_ReductionGen, "ReduceMaxFloat");
        public static ComputeFunction k_GlobalReduceMaxFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceMaxFloat");
        public static ComputeFunction k_ReduceMinFloat = new ComputeFunction(k_ReductionGen, "ReduceMinFloat");
        public static ComputeFunction k_GlobalReduceMinFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceMinFloat");
        public static ComputeFunction k_ReduceSumFloat = new ComputeFunction(k_ReductionGen, "ReduceSumFloat");
        public static ComputeFunction k_GlobalReduceSumFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceSumFloat");
        public static ComputeFunction k_ReduceSumSquareFloat = new ComputeFunction(k_ReductionGen, "ReduceSumSquareFloat");
        public static ComputeFunction k_GlobalReduceSumSquareFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceSumSquareFloat");
        public static ComputeFunction k_ReduceMeanFloat = new ComputeFunction(k_ReductionGen, "ReduceMeanFloat");
        public static ComputeFunction k_ReduceMeanSquareFloat = new ComputeFunction(k_ReductionGen, "ReduceMeanSquareFloat");
        public static ComputeFunction k_GlobalReduceMeanFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceMeanFloat");
        public static ComputeFunction k_GlobalReduceMeanSquareFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceMeanSquareFloat");
        public static ComputeFunction k_ReduceProdFloat = new ComputeFunction(k_ReductionGen, "ReduceProdFloat");
        public static ComputeFunction k_GlobalReduceProdFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceProdFloat");
        public static ComputeFunction k_ReduceL1Float = new ComputeFunction(k_ReductionGen, "ReduceL1Float");
        public static ComputeFunction k_GlobalReduceL1Float = new ComputeFunction(k_ReductionGen, "GlobalReduceL1Float");
        public static ComputeFunction k_ReduceL2Float = new ComputeFunction(k_ReductionGen, "ReduceL2Float");
        public static ComputeFunction k_GlobalReduceL2Float = new ComputeFunction(k_ReductionGen, "GlobalReduceL2Float");
        public static ComputeFunction k_ReduceSqrtFloat = new ComputeFunction(k_ReductionGen, "ReduceSqrtFloat");
        public static ComputeFunction k_GlobalReduceSqrtFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceSqrtFloat");
        public static ComputeFunction k_ReduceLogSumFloat = new ComputeFunction(k_ReductionGen, "ReduceLogSumFloat");
        public static ComputeFunction k_GlobalReduceLogSumFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceLogSumFloat");
        public static ComputeFunction k_ReduceLogSumExpFloat = new ComputeFunction(k_ReductionGen, "ReduceLogSumExpFloat");
        public static ComputeFunction k_GlobalReduceLogSumExpFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceLogSumExpFloat");
        public static ComputeFunction k_ReduceSumExpFloat = new ComputeFunction(k_ReductionGen, "ReduceSumExpFloat");
        public static ComputeFunction k_GlobalReduceSumExpFloat = new ComputeFunction(k_ReductionGen, "GlobalReduceSumExpFloat");
        public static ComputeFunction k_ReduceMaxInt = new ComputeFunction(k_ReductionGen, "ReduceMaxInt");
        public static ComputeFunction k_GlobalReduceMaxInt = new ComputeFunction(k_ReductionGen, "GlobalReduceMaxInt");
        public static ComputeFunction k_ReduceMinInt = new ComputeFunction(k_ReductionGen, "ReduceMinInt");
        public static ComputeFunction k_GlobalReduceMinInt = new ComputeFunction(k_ReductionGen, "GlobalReduceMinInt");
        public static ComputeFunction k_ReduceSumInt = new ComputeFunction(k_ReductionGen, "ReduceSumInt");
        public static ComputeFunction k_GlobalReduceSumInt = new ComputeFunction(k_ReductionGen, "GlobalReduceSumInt");
        public static ComputeFunction k_ReduceSumSquareInt = new ComputeFunction(k_ReductionGen, "ReduceSumSquareInt");
        public static ComputeFunction k_GlobalReduceSumSquareInt = new ComputeFunction(k_ReductionGen, "GlobalReduceSumSquareInt");
        public static ComputeFunction k_ReduceProdInt = new ComputeFunction(k_ReductionGen, "ReduceProdInt");
        public static ComputeFunction k_GlobalReduceProdInt = new ComputeFunction(k_ReductionGen, "GlobalReduceProdInt");
        public static ComputeFunction k_ReduceL1Int = new ComputeFunction(k_ReductionGen, "ReduceL1Int");
        public static ComputeFunction k_GlobalReduceL1Int = new ComputeFunction(k_ReductionGen, "GlobalReduceL1Int");
        public static ComputeFunction k_UnrolledReduceMaxFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceMaxFloat");
        public static ComputeFunction k_UnrolledReduceMinFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceMinFloat");
        public static ComputeFunction k_UnrolledReduceSumFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceSumFloat");
        public static ComputeFunction k_UnrolledReduceSumSquareFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceSumSquareFloat");
        public static ComputeFunction k_UnrolledReduceMeanFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceMeanFloat");
        public static ComputeFunction k_UnrolledReduceMeanSquareFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceMeanSquareFloat");
        public static ComputeFunction k_UnrolledReduceProdFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceProdFloat");
        public static ComputeFunction k_UnrolledReduceL1Float = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceL1Float");
        public static ComputeFunction k_UnrolledReduceL2Float = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceL2Float");
        public static ComputeFunction k_UnrolledReduceSqrtFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceSqrtFloat");
        public static ComputeFunction k_UnrolledReduceLogSumFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceLogSumFloat");
        public static ComputeFunction k_UnrolledReduceLogSumExpFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceLogSumExpFloat");
        public static ComputeFunction k_UnrolledReduceSumExpFloat = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceSumExpFloat");
        public static ComputeFunction k_UnrolledReduceMaxInt = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceMaxInt");
        public static ComputeFunction k_UnrolledReduceMinInt = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceMinInt");
        public static ComputeFunction k_UnrolledReduceSumInt = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceSumInt");
        public static ComputeFunction k_UnrolledReduceSumSquareInt = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceSumSquareInt");
        public static ComputeFunction k_UnrolledReduceProdInt = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceProdInt");
        public static ComputeFunction k_UnrolledReduceL1Int = new ComputeFunction(k_ReductionUnrolledGen, "UnrolledReduceL1Int");
        public static ComputeFunction k_LeakyRelu = new ComputeFunction(k_PointwiseUnaryGen, "LeakyRelu");
        public static ComputeFunction k_Swish = new ComputeFunction(k_PointwiseUnaryGen, "Swish");
        public static ComputeFunction k_Relu = new ComputeFunction(k_PointwiseUnaryGen, "Relu");
        public static ComputeFunction k_Relu6 = new ComputeFunction(k_PointwiseUnaryGen, "Relu6");
        public static ComputeFunction k_Tanh = new ComputeFunction(k_PointwiseUnaryGen, "Tanh");
        public static ComputeFunction k_Sigmoid = new ComputeFunction(k_PointwiseUnaryGen, "Sigmoid");
        public static ComputeFunction k_GeluFast = new ComputeFunction(k_PointwiseUnaryGen, "GeluFast");
        public static ComputeFunction k_HardSigmoid = new ComputeFunction(k_PointwiseUnaryGen, "HardSigmoid");
        public static ComputeFunction k_Gelu = new ComputeFunction(k_PointwiseUnaryGen, "Gelu");
        public static ComputeFunction k_Erf = new ComputeFunction(k_PointwiseUnaryGen, "Erf");
        public static ComputeFunction k_Celu = new ComputeFunction(k_PointwiseUnaryGen, "Celu");
        public static ComputeFunction k_Shrink = new ComputeFunction(k_PointwiseUnaryGen, "Shrink");
        public static ComputeFunction k_ThresholdedRelu = new ComputeFunction(k_PointwiseUnaryGen, "ThresholdedRelu");
        public static ComputeFunction k_Elu = new ComputeFunction(k_PointwiseUnaryGen, "Elu");
        public static ComputeFunction k_Selu = new ComputeFunction(k_PointwiseUnaryGen, "Selu");
        public static ComputeFunction k_Softplus = new ComputeFunction(k_PointwiseUnaryGen, "Softplus");
        public static ComputeFunction k_Ceil = new ComputeFunction(k_PointwiseUnaryGen, "Ceil");
        public static ComputeFunction k_Floor = new ComputeFunction(k_PointwiseUnaryGen, "Floor");
        public static ComputeFunction k_Round = new ComputeFunction(k_PointwiseUnaryGen, "Round");
        public static ComputeFunction k_Reciprocal = new ComputeFunction(k_PointwiseUnaryGen, "Reciprocal");
        public static ComputeFunction k_Exp = new ComputeFunction(k_PointwiseUnaryGen, "Exp");
        public static ComputeFunction k_Log = new ComputeFunction(k_PointwiseUnaryGen, "Log");
        public static ComputeFunction k_Sqrt = new ComputeFunction(k_PointwiseUnaryGen, "Sqrt");
        public static ComputeFunction k_Acos = new ComputeFunction(k_PointwiseUnaryGen, "Acos");
        public static ComputeFunction k_Acosh = new ComputeFunction(k_PointwiseUnaryGen, "Acosh");
        public static ComputeFunction k_Asin = new ComputeFunction(k_PointwiseUnaryGen, "Asin");
        public static ComputeFunction k_Asinh = new ComputeFunction(k_PointwiseUnaryGen, "Asinh");
        public static ComputeFunction k_Atan = new ComputeFunction(k_PointwiseUnaryGen, "Atan");
        public static ComputeFunction k_Atanh = new ComputeFunction(k_PointwiseUnaryGen, "Atanh");
        public static ComputeFunction k_Cos = new ComputeFunction(k_PointwiseUnaryGen, "Cos");
        public static ComputeFunction k_Cosh = new ComputeFunction(k_PointwiseUnaryGen, "Cosh");
        public static ComputeFunction k_Sin = new ComputeFunction(k_PointwiseUnaryGen, "Sin");
        public static ComputeFunction k_Sinh = new ComputeFunction(k_PointwiseUnaryGen, "Sinh");
        public static ComputeFunction k_Tan = new ComputeFunction(k_PointwiseUnaryGen, "Tan");
        public static ComputeFunction k_Softsign = new ComputeFunction(k_PointwiseUnaryGen, "Softsign");
        public static ComputeFunction k_HardSwish = new ComputeFunction(k_PointwiseUnaryGen, "HardSwish");
        public static ComputeFunction k_AbsInt = new ComputeFunction(k_PointwiseUnaryGen, "AbsInt");
        public static ComputeFunction k_AbsFloat = new ComputeFunction(k_PointwiseUnaryGen, "AbsFloat");
        public static ComputeFunction k_NegInt = new ComputeFunction(k_PointwiseUnaryGen, "NegInt");
        public static ComputeFunction k_NegFloat = new ComputeFunction(k_PointwiseUnaryGen, "NegFloat");
        public static ComputeFunction k_SquareInt = new ComputeFunction(k_PointwiseUnaryGen, "SquareInt");
        public static ComputeFunction k_SquareFloat = new ComputeFunction(k_PointwiseUnaryGen, "SquareFloat");
        public static ComputeFunction k_IsNaN = new ComputeFunction(k_PointwiseUnaryGen, "IsNaN");
        public static ComputeFunction k_CastIntToFloat = new ComputeFunction(k_PointwiseUnaryGen, "CastIntToFloat");
        public static ComputeFunction k_CastFloatToInt = new ComputeFunction(k_PointwiseUnaryGen, "CastFloatToInt");
        public static ComputeFunction k_SignFloat = new ComputeFunction(k_PointwiseUnaryGen, "SignFloat");
        public static ComputeFunction k_SignInt = new ComputeFunction(k_PointwiseUnaryGen, "SignInt");
        public static ComputeFunction k_Not = new ComputeFunction(k_PointwiseUnaryGen, "Not");
        public static ComputeFunction k_ClipFloat = new ComputeFunction(k_PointwiseUnaryGen, "ClipFloat");
        public static ComputeFunction k_ClipInt = new ComputeFunction(k_PointwiseUnaryGen, "ClipInt");
        public static ComputeFunction k_ScalarMadFloat = new ComputeFunction(k_PointwiseUnaryGen, "ScalarMadFloat");
        public static ComputeFunction k_ScalarMadInt = new ComputeFunction(k_PointwiseUnaryGen, "ScalarMadInt");
        public static ComputeFunction k_RangeFloat = new ComputeFunction(k_PointwiseUnaryGen, "RangeFloat");
        public static ComputeFunction k_RangeInt = new ComputeFunction(k_PointwiseUnaryGen, "RangeInt");
        public static ComputeFunction k_Transpose = new ComputeFunction(k_GenericAGen, "Transpose");
        public static ComputeFunction k_InstanceNormalizationTail = new ComputeFunction(k_GenericAGen, "InstanceNormalizationTail");
        public static ComputeFunction k_PadBorderND = new ComputeFunction(k_PadAGen, "PadBorderND");
        public static ComputeFunction k_PadReflectND = new ComputeFunction(k_PadAGen, "PadReflectND");
        public static ComputeFunction k_PadSymmetricND = new ComputeFunction(k_PadAGen, "PadSymmetricND");
        public static ComputeFunction k_PadEdgeND = new ComputeFunction(k_PadAGen, "PadEdgeND");
        public static ComputeFunction k_PadWrapND = new ComputeFunction(k_PadAGen, "PadWrapND");
        public static ComputeFunction k_MaxPool2D = new ComputeFunction(k_PoolAGen, "MaxPool2D");
        public static ComputeFunction k_AveragePool2D = new ComputeFunction(k_PoolAGen, "AveragePool2D");
        public static ComputeFunction k_MaxPool1D = new ComputeFunction(k_PoolAGen, "MaxPool1D");
        public static ComputeFunction k_AveragePool1D = new ComputeFunction(k_PoolAGen, "AveragePool1D");
        public static ComputeFunction k_EinsumOne = new ComputeFunction(k_EinsumGen, "EinsumOne");
        public static ComputeFunction k_EinsumTwo = new ComputeFunction(k_EinsumGen, "EinsumTwo");
        public static ComputeFunction k_Tile = new ComputeFunction(k_IndexingOpsAGen, "Tile");
        public static ComputeFunction k_Gather = new ComputeFunction(k_IndexingOpsAGen, "Gather");
        public static ComputeFunction k_GatherElementsFast = new ComputeFunction(k_IndexingOpsAGen, "GatherElementsFast");
        public static ComputeFunction k_GatherElements = new ComputeFunction(k_IndexingOpsAGen, "GatherElements");
        public static ComputeFunction k_ScatterElementsFast = new ComputeFunction(k_IndexingOpsAGen, "ScatterElementsFast");
        public static ComputeFunction k_ScatterElements = new ComputeFunction(k_IndexingOpsAGen, "ScatterElements");
        public static ComputeFunction k_Expand = new ComputeFunction(k_IndexingOpsAGen, "Expand");
        public static ComputeFunction k_Slice = new ComputeFunction(k_IndexingOpsAGen, "Slice");
        public static ComputeFunction k_Where = new ComputeFunction(k_LogicalGen, "Where");
        public static ComputeFunction k_BitonicSortStep = new ComputeFunction(k_BitonicSort, "BitonicSortStep");
        public static ComputeFunction k_BitonicSortKeyStep = new ComputeFunction(k_BitonicSort, "BitonicSortKeyStep");
    }

    class ComputeFunction
    {
        public ComputeShader shader;
        public int kernelIndex;
        public uint threadGroupSizeX;
        public uint threadGroupSizeY;
        public uint threadGroupSizeZ;
        public ProfilerMarker profilerMarker;

        public ComputeFunction(ComputeShader shader, string kernelName)
        {
            this.shader = shader;
            this.kernelIndex = shader.FindKernel(kernelName);
            this.shader.GetKernelThreadGroupSizes(kernelIndex, out threadGroupSizeX, out threadGroupSizeY, out threadGroupSizeZ);
            this.profilerMarker = new ProfilerMarker(kernelName);
        }
    }
}
