#pragma kernel GreaterFloat GREATER FLOAT SUFFIX=GreaterFloat
#pragma kernel GreaterInt GREATER INT SUFFIX=GreaterInt
#pragma kernel GreaterOrEqualFloat GREATER_EQUAL FLOAT SUFFIX=GreaterOrEqualFloat
#pragma kernel GreaterOrEqualInt GREATER_EQUAL INT SUFFIX=GreaterOrEqualInt
#pragma kernel LessFloat LESS FLOAT SUFFIX=LessFloat
#pragma kernel LessInt LESS INT SUFFIX=LessInt
#pragma kernel LessOrEqualFloat LESS_EQUAL FLOAT SUFFIX=LessOrEqualFloat
#pragma kernel LessOrEqualInt LESS_EQUAL INT SUFFIX=LessOrEqualInt
#pragma kernel EqualFloat EQUAL FLOAT SUFFIX=EqualFloat
#pragma kernel EqualInt EQUAL INT SUFFIX=EqualInt

#include "Tensor.cginc"

int shapeO[8];
int stridesO[8];
int shapeA[8];
int stridesA[8];
int shapeB[8];
int stridesB[8];
uint2 unrolledDispatchArgs;
int rank;

#if defined(INT)
StructuredBuffer<int> Xptr;
StructuredBuffer<int> Bptr;
#else
StructuredBuffer<float> Xptr;
StructuredBuffer<float> Bptr;
#endif
RWStructuredBuffer<int> Optr;

#define COMPARE_FUNC_NAME_CALL(KERNEL) KERNEL
#define COMPARE_FUNC_NAME(KERNEL) REDUCE_FUNC_NAME_CALL(KERNEL)

#if defined(INT)
inline int CompareOp(int x, int y)
#else
inline float CompareOp(float x, float y)
#endif
{
#if defined(GREATER)
    return x > y;
#elif defined(GREATER_EQUAL)
    return x >= y;
#elif defined(LESS)
    return x < y;
#elif defined(LESS_EQUAL)
    return x <= y;
#elif defined(EQUAL)
    return x == y;
#else
    return 0;
#endif
}

[numthreads(64, 1, 1)]
void SUFFIX(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if (threadIdx < unrolledDispatchArgs.y)
    {
        int indexA = 0;
        int indexB = 0;
        int axis;
        int sIdx;
        int strideO;
        int shapeOi;
        int shapeAi, shapeBi;
        int strideA, strideB;

        for (axis = 0; axis < rank; axis++)
        {
            // The following provokes a compiler bug on xbox series and has been broken down below:
            //      indexA += (((threadIdx / stridesO[(SHAPE_MAXRANK - 1) - axis]) % shapeO[(SHAPE_MAXRANK - 1) - axis]) % shapeA[(SHAPE_MAXRANK - 1) - axis]) * stridesA[(SHAPE_MAXRANK - 1) - axis];
            //      indexB += (((threadIdx / stridesO[(SHAPE_MAXRANK - 1) - axis]) % shapeO[(SHAPE_MAXRANK - 1) - axis]) % shapeB[(SHAPE_MAXRANK - 1) - axis]) * stridesB[(SHAPE_MAXRANK - 1) - axis];
            sIdx = (SHAPE_MAXRANK - 1) - axis;
            strideO = stridesO[sIdx];
            shapeOi = shapeO[sIdx];
            shapeAi = shapeA[sIdx];
            shapeBi = shapeB[sIdx];
            strideA = stridesA[sIdx];
            strideB = stridesB[sIdx];

            indexA += (((threadIdx / strideO) % shapeOi) % shapeAi) * strideA;
            indexB += (((threadIdx / strideO) % shapeOi) % shapeBi) * strideB;
        }

        Optr[threadIdx] = CompareOp(Xptr[indexA], Bptr[indexB]);
    }
}

