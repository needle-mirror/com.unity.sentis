// This is auto-generated -- do not modify directly

#pragma kernel PadBorderND PADBORDERND
#pragma kernel PadReflectND PADREFLECTND
#pragma kernel PadSymmetricND PADSYMMETRICND
#pragma kernel PadEdgeND PADEDGEND
#pragma kernel PadWrapND PADWRAPND
#include "HLSLSupport.cginc"
#include "Tensor.cginc"

int pad[16];
int shapeO[8];
int stridesO[8];
int shapeX[8];
int stridesX[8];
uint2 unrolledDispatchArgs;
float Beta;
int rank;
StructuredBuffer<float> Xptr;
RWStructuredBuffer<float> Optr;


#ifdef PADBORDERND
[numthreads(64, 1, 1)]
void PadBorderND(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if(threadIdx < unrolledDispatchArgs.y)
    {
        int indexX = 0;

        int sIdx;
        int strideO;
        int strideX;
        int shapeOi;
        int padi;
        int padii;
        int shapeXi;

        int readIdx;
        int croppedDim;

        bool allInsideRegion = true;

        int j;
        for (j = 0; j < rank; j++)
        {
            // The code below breaks the following down as it triggers a compiler bug issue on xbox series:
            //      int readIdx = ((threadIdx / stridesO[(SHAPE_MAXRANK-1) - j]) % shapeO[(SHAPE_MAXRANK-1) - j]) - pad[(rank - 1) - j];
            //      int croppedDim = shapeX[(SHAPE_MAXRANK-1) - j] - max(0, -pad[(2 * rank - 1) - j]);
            //      indexX += stridesX[(SHAPE_MAXRANK-1) - j] * readIdx;
            //      allInsideRegion = allInsideRegion && (readIdx >= 0) && (readIdx < croppedDim);
            sIdx = (SHAPE_MAXRANK-1) - j;
            strideO = stridesO[sIdx];
            shapeOi = shapeO[sIdx];
            padi = pad[(rank - 1) - j];
            shapeXi = shapeX[sIdx];
            padii = -1 * pad[(2 * rank - 1) - j];
            strideX = stridesX[sIdx];

            readIdx = ((threadIdx / strideO) % shapeOi) - padi;
            croppedDim = shapeXi - max(0, padii);

            indexX += strideX * readIdx;

            allInsideRegion = allInsideRegion && (readIdx >= 0) && (readIdx < croppedDim);
        }

        if (allInsideRegion)
            Optr[threadIdx] = Xptr[indexX];
        else
            Optr[threadIdx] = Beta;
    }
}
#endif


#ifdef PADREFLECTND
[numthreads(64, 1, 1)]
void PadReflectND(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if(threadIdx < unrolledDispatchArgs.y)
    {
        int indexX = 0;
        int indexXReflect = 0;

        int sIdx;
        int strideO;
        int strideX;
        int shapeOi;
        int padi;
        int padii;
        int shapeXi;

        int readIdx;
        int croppedDim;
        int lastIdx;

        bool allInsideRegion = true;

        int j;
        for (j = 0; j < rank; j++)
        {
            // See PadBorderND. The code below breaks the original down as it triggered a compiler bug issue on xbox series.
            // Do not refactor into more compact code:

            sIdx = (SHAPE_MAXRANK-1) - j;
            strideO = stridesO[sIdx];
            shapeOi = shapeO[sIdx];
            padi = pad[(rank - 1) - j];
            shapeXi = shapeX[sIdx];
            padii = -1 * pad[(2 * rank - 1) - j];
            strideX = stridesX[sIdx];

            readIdx = ((threadIdx / strideO) % shapeOi) - padi;
            croppedDim = shapeXi - max(0, padii);

            indexX += strideX * readIdx;

            allInsideRegion = allInsideRegion && (readIdx >= 0) && (readIdx < croppedDim);

            lastIdx = shapeXi - 1;

            if (readIdx < 0)
                readIdx = -readIdx;
            else if (readIdx > lastIdx)
                readIdx = lastIdx - (readIdx - lastIdx);

            indexXReflect += strideX * min(max(readIdx, 0), lastIdx);
        }

        if (allInsideRegion)
            Optr[threadIdx] = Xptr[indexX];
        else
            Optr[threadIdx] = Xptr[indexXReflect];
    }
}
#endif


#ifdef PADSYMMETRICND
[numthreads(64, 1, 1)]
void PadSymmetricND(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if(threadIdx < unrolledDispatchArgs.y)
    {
        int indexX = 0;
        int indexXSymmetric = 0;

        int sIdx;
        int strideO;
        int strideX;
        int shapeOi;
        int padi;
        int padii;
        int shapeXi;

        int readIdx;
        int croppedDim;
        int lastIdx;

        bool allInsideRegion = true;

        int j;
        for (j = 0; j < rank; j++)
        {
            // See PadBorderND. The code below breaks the original down as it triggered a compiler bug issue on xbox series.
            // Do not refactor into more compact code:

            sIdx = (SHAPE_MAXRANK-1) - j;
            strideO = stridesO[sIdx];
            shapeOi = shapeO[sIdx];
            padi = pad[(rank - 1) - j];
            shapeXi = shapeX[sIdx];
            padii = -1 * pad[(2 * rank - 1) - j];
            strideX = stridesX[sIdx];

            readIdx = ((threadIdx / strideO) % shapeOi) - padi;
            croppedDim = shapeXi - max(0, padii);

            indexX += strideX * readIdx;

            allInsideRegion = allInsideRegion && (readIdx >= 0) && (readIdx < croppedDim);

            lastIdx = shapeXi - 1;

            if (readIdx < 0)
                readIdx = -readIdx - 1;
            else if (readIdx > lastIdx)
                readIdx = lastIdx - (readIdx - lastIdx) + 1;

            indexXSymmetric += strideX * min(max(readIdx, 0), lastIdx);
        }

        if (allInsideRegion)
            Optr[threadIdx] = Xptr[indexX];
        else
            Optr[threadIdx] = Xptr[indexXSymmetric];
    }
}
#endif


#ifdef PADEDGEND
[numthreads(64, 1, 1)]
void PadEdgeND(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if(threadIdx < unrolledDispatchArgs.y)
    {
        int indexX = 0;
        int indexXEdge = 0;

        int sIdx;
        int strideO;
        int strideX;
        int shapeOi;
        int padi;
        int padii;
        int shapeXi;

        int readIdx;
        int croppedDim;
        int lastIdx;

        bool allInsideRegion = true;

        int j;
        for (j = 0; j < rank; j++)
        {
            // See PadBorderND. The code below breaks the original down as it triggered a compiler bug issue on xbox series.
            // Do not refactor into more compact code:

            sIdx = (SHAPE_MAXRANK-1) - j;
            strideO = stridesO[sIdx];
            shapeOi = shapeO[sIdx];
            padi = pad[(rank - 1) - j];
            shapeXi = shapeX[sIdx];
            padii = -1 * pad[(2 * rank - 1) - j];
            strideX = stridesX[sIdx];

            readIdx = ((threadIdx / strideO) % shapeOi) - padi;
            croppedDim = shapeXi - max(0, padii);

            indexX += strideX * readIdx;

            allInsideRegion = allInsideRegion && (readIdx >= 0) && (readIdx < croppedDim);

            lastIdx = shapeXi - 1;

            indexXEdge += strideX * min(max(readIdx, 0), lastIdx);
        }

        if (allInsideRegion)
            Optr[threadIdx] = Xptr[indexX];
        else
            Optr[threadIdx] = Xptr[indexXEdge];
    }
}
#endif


#ifdef PADWRAPND
[numthreads(64, 1, 1)]
void PadWrapND(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if(threadIdx < unrolledDispatchArgs.y)
    {
        int indexX = 0;
        int indexXWrap = 0;

        int sIdx;
        int strideO;
        int strideX;
        int shapeOi;
        int padi;
        int padii;
        int shapeXi;

        int readIdx;
        int croppedDim;
        int lastIdx;

        bool allInsideRegion = true;

        int j;
        for (j = 0; j < rank; j++)
        {
            // See PadBorderND. The code below breaks the original down as it triggered a compiler bug issue on xbox series.
            // Do not refactor into more compact code:

            sIdx = (SHAPE_MAXRANK-1) - j;
            strideO = stridesO[sIdx];
            shapeOi = shapeO[sIdx];
            padi = pad[(rank - 1) - j];
            shapeXi = shapeX[sIdx];
            padii = -1 * pad[(2 * rank - 1) - j];
            strideX = stridesX[sIdx];

            readIdx = ((threadIdx / strideO) % shapeOi) - padi;
            croppedDim = shapeXi - max(0, padii);

            indexX += strideX * readIdx;

            allInsideRegion = allInsideRegion && (readIdx >= 0) && (readIdx < croppedDim);

            lastIdx = shapeXi; // no -1
            readIdx = ((readIdx % lastIdx) + lastIdx) % lastIdx;

            indexXWrap += strideX * min(max(readIdx, 0), lastIdx);
        }

        if (allInsideRegion)
            Optr[threadIdx] = Xptr[indexX];
        else
            Optr[threadIdx] = Xptr[indexXWrap];
    }
}
#endif

