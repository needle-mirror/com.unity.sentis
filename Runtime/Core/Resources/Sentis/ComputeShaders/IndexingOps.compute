#pragma kernel OneHot INT
#pragma kernel GatherND FLOAT
#pragma kernel SliceSet SLICESET

#include "Tensor.cginc"

int stridesIndices[8]; // Leave this declaration precisely here, this avoids triggered a bug on xbox series, see below.
int shapeO[8];
int stridesO[8];
int shapeX[8];
int stridesX[8];
int shapeIndices[8];
//int stridesIndices[8] moved up, leave this as is until we find descriptor/binding problem on xbox series.

uint2 unrolledDispatchArgs;

uint rankO;
uint rankX;
uint rankIndices;

int depth;
int onValue;
int offValue;
uint stridesToAxis;
uint axisDim;

// GatherND
uint iStart;
uint iEndIndices;
uint iEndX;
uint iStartB;
uint iEndB;


#ifdef INT
StructuredBuffer<int> Xptr;
RWStructuredBuffer<int> Optr;
#else
StructuredBuffer<float> Xptr;
RWStructuredBuffer<float> Optr;
#endif

StructuredBuffer<int> Bptr;


[numthreads(64, 1, 1)]
void OneHot(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = dispatchThreadID.x;

    int j = (threadIdx / stridesToAxis) % axisDim;
    int index = Xptr[(threadIdx - stridesToAxis * j) / axisDim + (threadIdx % stridesToAxis)];
    index = index < 0 ? depth + index : index;

    int v = (j == index) ? onValue : offValue;

    Optr[threadIdx] = v;
}


[numthreads(64, 1, 1)]
void GatherND(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if (threadIdx < unrolledDispatchArgs.y)
    {
        uint itIndices = 0;
        uint itX = 0;
        uint i;
        uint itO;

        int index;
        uint strideX;

        // iterate up to where i == iEndX
        for (i = iStart; i < iEndX; i++)
        {
            itO = (threadIdx / stridesO[i]) % shapeO[i];
            itIndices += itO * stridesIndices[(rankO - rankIndices) + i];
            itX += itO * stridesX[(rankO - rankX) + i];
        }

        // finish indices
        for (i = iEndX; i < iEndIndices; i++)
        {
            itIndices += ((threadIdx / stridesO[i]) % shapeO[i]) * stridesIndices[(rankO - rankIndices) + i];
        }

        itIndices -= iStartB;

        for (i = iStartB; i < iEndB; i++)
        {
            strideX = stridesX[i];
            index = Bptr[itIndices + i];
            if (index < 0)
                index = shapeX[i] + index;
            itX += index * stridesX[i];
        }

        for (; i < 8; i++)
        {
            itX += ((threadIdx / stridesO[i]) % shapeO[i]) * stridesX[i];
        }

        Optr[threadIdx] = Xptr[itX];
    }
}

int starts[8];
int steps[8];
int rank;

[numthreads(64, 1, 1)]
void SliceSet(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint threadIdx = unrolledDispatchArgs.x * dispatchThreadID.y + dispatchThreadID.x;
    if (threadIdx >= unrolledDispatchArgs.y)
        return;
    int indexO = 0;
    for (int axis = 0; axis < rank; axis++)
    {
        int iA = starts[(SHAPE_MAXRANK-1) - axis] + ((threadIdx / stridesX[(SHAPE_MAXRANK-1) - axis]) % shapeX[(SHAPE_MAXRANK-1) - axis]) * steps[(SHAPE_MAXRANK-1) - axis];
        indexO += ((uint)iA % shapeO[(SHAPE_MAXRANK-1) - axis]) * stridesO[(SHAPE_MAXRANK-1) - axis];
    }

    Optr[indexO] = Xptr[threadIdx];
}
